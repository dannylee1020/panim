[
  {
    "instruction": "I'm new to Manim. Which version should I install and why?",
    "answer": "For beginners, the community-maintained version (ManimCE, package name `manim` on PyPI) is recommended. It's developed to be more stable, better tested, well-documented, and responds quicker to community contributions. You can always switch to another version later if needed."
  },
  {
    "instruction": "What's the difference between Manim Community Edition (ManimCE) and ManimGL?",
    "answer": "ManimCE (package `manim`) is the community-maintained version, focusing on stability, testing, documentation, and community contributions. ManimGL (package `manimgl`) is Grant Sanderson's (3Blue1Brown) version, featuring more experimental updates and potentially breaking changes between versions without detailed documentation. ManimCE is generally recommended for starting."
  },
  {
    "instruction": "Is ManimCairo still relevant? When would I use it?",
    "answer": "ManimCairo is the old, pre-OpenGL version of ManimGL. Its primary use case today is for rendering old 3Blue1Brown projects (roughly from 2019 and earlier). For new projects, Manim Community Edition (`manim`) or ManimGL (`manimgl`) are recommended. The latest version of ManimCairo is available on PyPI as `manimlib`, but you might need specific older versions for Grant's old projects."
  },
  {
    "instruction": "How can I identify which version of Manim a script was written for?",
    "answer": "Check the import statements at the beginning of the Python file:\n- `from manim import ...` or `import manim` typically means it's for the Manim Community Edition.\n- `import manimlib` or `from manimlib import ...` usually means it's for ManimGL.\n- `from manimlib.imports import *` or `from big_ol_pile_of_manim_imports import *` indicates an older version, likely ManimCairo."
  },
  {
    "instruction": "How do I verify which version of Manim I have installed on my system?",
    "answer": "You can check in a couple of ways:\n1. Run `manim` in your terminal. If the first line of the output says `Manim Community <version number>`, you have the community version. Otherwise, you likely have ManimGL.\n2. Run `python -m pip list` (or `py -m pip list`, `python3 -m pip list` depending on your system) in your terminal. Look for either `manim` (Community Edition) or `manimgl` (ManimGL) in the list of installed packages."
  },
  {
    "instruction": "I'm following a video tutorial to install Manim, but it's not working. What should I do?",
    "answer": "Video tutorials for Manim installation can become outdated quickly because the installation process might change. It's strongly recommended to follow the official written installation guide provided in the documentation. If you prefer video guides, check if the creator has released a more recent version. Asking for help in the community will likely result in suggestions to use the written guide."
  },
  {
    "instruction": "My Manim installation fails with an error related to `ManimPango`. How can I fix this?",
    "answer": "This often means `pip` couldn't find or use a pre-built binary ('wheel') for `ManimPango` for your system architecture. You might need to install the necessary build dependencies yourself. Check the detailed instructions in the 'BUILDING' section of ManimPango's README on GitHub. Sometimes, specifically if the error mentions `manimpango/cmanimpango.c` not found, installing Cython first (`pip install Cython` or `python -m pip install Cython`) and then retrying the Manim installation can resolve the issue."
  },
  {
    "instruction": "On Windows, I get the error `'manim' is not recognized as an internal or external command...`. How can I run Manim?",
    "answer": "This usually happens for one of two reasons:\n1. If you installed Manim in a virtual environment (like with `uv`), you need to activate it first or prepend commands with `uv run`. For example, use `uv run manim ...` instead of just `manim`. Check the instructions from `uv venv` on how to activate the environment.\n2. There might be an issue with your system's `PATH` variable. If the `python` command works, try running Manim using `python -m manim ...` instead of just `manim`. Similarly, use `python -m pip` instead of `pip`. If `python` isn't recognized either, you may need to manually edit your `PATH` variable."
  },
  {
    "instruction": "I tried installing Manim using Chocolatey (`choco install manimce`) but it failed. What should I check?",
    "answer": "First, ensure you ran the `choco install manimce` command with administrator permissions. If it still failed, carefully read Chocolatey's output. It should mention a `.log` file containing details about the failure. You can use this log file when asking for help from the Manim community."
  },
  {
    "instruction": "When I type `python` or `python3` in my Windows terminal, the Microsoft Store opens. How do I fix this?",
    "answer": "Windows has aliases that can redirect these commands to the Store if Python isn't found correctly. You can disable these:\n1. Go to Windows Settings.\n2. Navigate to 'Apps' or 'Apps and Features'.\n3. Find 'App execution aliases'.\n4. Within this menu, turn off the aliases for `python.exe` and `python3.exe` that point to the App Installer."
  },
  {
    "instruction": "I'm using Anaconda and getting an `ImportError` mentioning a missing symbol related to Cairo when trying to use Manim. What's the fix?",
    "answer": "This typically occurs because Anaconda environments often have their own preinstalled version of the `cairo` library, which can conflict with the `pycairo` version Manim needs. You can usually fix this by installing the compatible `pycairo` version from the `conda-forge` channel using this command in your conda environment:\n```bash\nconda install -c conda-forge pycairo\n```"
  }
]