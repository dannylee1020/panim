[
  {
    "instruction": "What are the main ways to render text in Manim?",
    "answer": "Manim offers two primary methods for rendering text:\n1.  **Using Pango (`Text`, `MarkupText`):** Best for general text, including non-English characters and rich text formatting via PangoMarkup. Use `Text` for plain text and `MarkupText` for formatted text (like HTML spans).\n2.  **Using LaTeX (`Tex`, `MathTex`):** Essential for mathematical typesetting and complex formulas. Use `Tex` for general LaTeX and `MathTex` for content primarily in math mode."
  },
  {
    "instruction": "Generate Manim code to display the text 'Hello World' on the screen.",
    "answer": "```python\nfrom manim import *\n\nclass HelloWorld(Scene):\n    def construct(self): \n        # Create a Text object\n        text_mobject = Text(\"Hello world\", font_size=144)\n        \n        # Add the text object to the scene\n        self.add(text_mobject)\n```\nThis code uses the `Text` class, which relies on the Pango library, to render the string \"Hello world\" with a large font size and adds it to the scene."
  },
  {
    "instruction": "How can I display text where some words have different colors using Manim?",
    "answer": "You can use `MarkupText` which supports PangoMarkup for inline styling. Define the text using an f-string and embed `<span>` tags with `fgcolor` attributes.\n\nExample:\n```python\nfrom manim import *\n\nclass ColoredWords(Scene):\n    def construct(self): \n        text = MarkupText(\n            f'This word is <span fgcolor=\"{YELLOW}\">yellow</span> and this is <span fgcolor=\"{BLUE}\">blue</span>.', \n            color=WHITE, # Default color for text not in spans\n            font_size=48\n        )\n        self.add(text)\n```\nAlternatively, for the `Text` object, you can use the `t2c` (text-to-color) argument, passing a dictionary where keys are substrings or slices and values are colors. However, `MarkupText` is often preferred as it avoids potential issues with ligatures.\n\nExample using `Text` with `t2c`:\n```python\nfrom manim import *\n\nclass ColoredWordsT2C(Scene):\n    def construct(self):\n        text = Text(\n            'This word is yellow and this is blue.', \n            t2c={'yellow': YELLOW, 'blue': BLUE},\n            font_size=48\n        )\n        self.add(text)\n```"
  },
  {
    "instruction": "Show me how to use a specific font, like 'Arial', for text in Manim.",
    "answer": "To use a specific font with the `Text` mobject, specify the font name using the `font` parameter. Make sure the font is installed on your system and recognized by Pango.\n\n```python\nfrom manim import *\n\nclass CustomFontExample(Scene):\n    def construct(self): \n        # Ensure 'Arial' font is installed and known to Pango\n        arial_text = Text(\"This is Arial\", font=\"Arial\", font_size=72)\n        self.add(arial_text)\n```\nYou can check available fonts using `manimpango.list_fonts()`."
  },
  {
    "instruction": "How do I make text italic or bold in Manim?",
    "answer": "For `Text` mobjects, you can control the slant (italic/oblique) and weight (boldness) using the `slant` and `weight` parameters respectively.\n\n```python\nfrom manim import *\nimport manimpango # Needed for Weight constants\n\nclass SlantAndWeightExample(Scene):\n    def construct(self): \n        italic_text = Text(\"Italic Text\", slant=ITALIC)\n        # Use a specific weight name from manimpango.Weight\n        bold_text = Text(\"Bold Text\", weight=manimpango.Weight.BOLD.name).next_to(italic_text, DOWN)\n        \n        self.add(italic_text, bold_text)\n```\nCommon `slant` values are `NORMAL`, `ITALIC`, `OBLIQUE`. Common `weight` names include `NORMAL`, `BOLD`, `LIGHT`, etc. (refer to `manimpango.Weight`)."
  },
  {
    "instruction": "Generate Manim code to color only the second to fourth characters of the word 'Example' blue.",
    "answer": "You can use the `t2c` (text-to-color) parameter with slice notation within the `Text` object.\n\n```python\nfrom manim import *\n\nclass SliceColoringExample(Scene):\n    def construct(self):\n        # Indices are 0-based. '[1:4]' colors characters at index 1, 2, 3 ('xam').\n        colored_text = Text(\n            'Example',\n            t2c={'[1:4]': BLUE}, \n            font_size=96\n        )\n        self.add(colored_text)\n```\nThis will color the 'x', 'a', and 'm' characters blue."
  },
  {
    "instruction": "How can I apply a color gradient to text in Manim?",
    "answer": "Use the `gradient` parameter in the `Text` object, providing a tuple or list of colors.\n\n```python\nfrom manim import *\n\nclass TextGradientExample(Scene):\n    def construct(self):\n        gradient_text = Text(\n            \"Gradient Text\", \n            gradient=(BLUE, GREEN, YELLOW), \n            font_size=96\n        )\n        self.add(gradient_text)\n```\nManim will distribute the specified colors as a gradient across the text."
  },
  {
    "instruction": "Is it possible to apply a gradient to only a specific part of a Text object?",
    "answer": "Yes, similar to coloring specific parts with `t2c`, you can apply gradients to specific parts using the `t2g` (text-to-gradient) parameter. It accepts a dictionary where keys are substrings or slices, and values are tuples of colors for the gradient.\n\n```python\nfrom manim import *\n\nclass PartialGradientExample(Scene):\n    def construct(self):\n        partial_gradient_text = Text(\n            'Apply Gradient Here',\n            t2g={'Gradient': (RED, YELLOW)},\n            font_size=72\n        )\n        self.add(partial_gradient_text)\n```"
  },
  {
    "instruction": "How do I adjust the vertical spacing between lines in multiline text?",
    "answer": "Use the `line_spacing` parameter when creating a `Text` object with newline characters (`\\n`). The value is a multiplier relative to the default spacing.\n\n```python\nfrom manim import *\n\nclass LineSpacingExample(Scene):\n    def construct(self):\n        # Default spacing usually looks like line_spacing=1\n        normal_spacing = Text(\"Line 1\\nLine 2\", line_spacing=1)\n        increased_spacing = Text(\"Line A\\nLine B\", line_spacing=2).next_to(normal_spacing, RIGHT, buff=2)\n        \n        self.add(normal_spacing, increased_spacing)\n```"
  },
  {
    "instruction": "I'm having trouble coloring individual letters in words like 'flour' because 'fl' is treated as one unit. How can I fix this?",
    "answer": "This issue occurs due to font ligatures, where certain character combinations (like 'fl', 'fi') are rendered as a single glyph. To ensure each character is treated as a separate object for coloring or iteration, disable ligatures by setting `disable_ligatures=True` when creating the `Text` object.\n\n```python\nfrom manim import *\n\nclass DisableLigaturesExample(Scene):\n    def construct(self):\n        # Without disabling ligatures, 'f' and 'l' might be one submobject\n        text_with_ligatures = Text(\"flour\", font_size=96)\n        \n        # With ligatures disabled, 'f' and 'l' are guaranteed separate submobjects\n        text_without_ligatures = Text(\"flour\", disable_ligatures=True, font_size=96)\n\n        # Example: Coloring the 'l' blue is easier without ligatures\n        text_without_ligatures[1].set_color(BLUE)\n\n        group = Group(text_with_ligatures, text_without_ligatures).arrange(DOWN, buff=1)\n        self.add(group)\n```\nBe aware that disabling ligatures might slightly alter the text's appearance, especially in scripts that heavily rely on them."
  },
  {
    "instruction": "How can I iterate through the letters of a Manim `Text` object to change their colors individually?",
    "answer": "A `Text` object behaves like a `VGroup`, meaning you can iterate directly over its components (which are usually individual characters, unless ligatures interfere). You can then apply methods like `set_color` to each component.\n\n```python\nfrom manim import *\n\nclass IterateAndColorLetters(Scene):\n    def construct(self):\n        my_text = Text(\"Colorful\", font_size=96, disable_ligatures=True) # Disable ligatures for safety\n        \n        colors = [RED, ORANGE, YELLOW, GREEN, BLUE, PURPLE]\n        for i, letter in enumerate(my_text):\n            letter.set_color(colors[i % len(colors)])\n            \n        self.add(my_text)\n```\nUsing `disable_ligatures=True` is recommended for reliable one-to-one character mapping."
  },
  {
    "instruction": "Generate Manim code to display a mathematical formula using LaTeX, for example, E=mc^2.",
    "answer": "You should use the `MathTex` class for mathematical formulas, as it automatically handles math mode. Remember to use raw strings (`r\"...\"`) for the LaTeX code.\n\n```python\nfrom manim import *\n\nclass SimpleFormula(Scene):\n    def construct(self):\n        # Use MathTex for math mode content\n        formula = MathTex(r\"E = mc^2\", font_size=96)\n        self.add(formula)\n```"
  },
  {
    "instruction": "What's the difference between `Tex` and `MathTex` in Manim?",
    "answer": "`Tex` is used for general LaTeX rendering, while `MathTex` is specifically designed for mathematical content. The main difference is that `MathTex` automatically wraps the input string within a LaTeX `align*` environment, meaning everything inside is processed in math mode by default. With `Tex`, you would typically need to enclose mathematical expressions in `$` symbols (e.g., `Tex(r\"An equation: $E=mc^2$\")`) or use appropriate LaTeX math environments explicitly."
  },
  {
    "instruction": "How do I include a LaTeX package, like 'mathrsfs' for script fonts, when rendering TeX in Manim?",
    "answer": "You need to create a custom `TexTemplate`, add the required package to its preamble using `add_to_preamble`, and then pass this template to the `Tex` or `MathTex` object using the `tex_template` argument.\n\n```python\nfrom manim import *\n\nclass LaTeXPackageExample(Scene):\n    def construct(self):\n        # Create a new TeX template\n        my_template = TexTemplate()\n        # Add the desired package to the preamble\n        my_template.add_to_preamble(r\"\\usepackage{mathrsfs}\")\n        \n        # Use the custom template when creating the Tex object\n        script_text = Tex(\n            r\"This uses $\\mathscr{L}$ script font.\",\n            tex_template=my_template,\n            font_size=72\n        )\n        self.add(script_text)\n```"
  },
  {
    "instruction": "How can I color a specific part of a LaTeX formula in Manim, like just the 'x' in 'e^x = ...'?",
    "answer": "To reliably color specific parts of a `Tex` or `MathTex` object, you should isolate that part first. You can do this either by:\n1.  Passing the part you want to isolate as a separate string argument to `Tex` or `MathTex`.\n2.  Using the `substrings_to_isolate` argument.\n3.  Using double brace syntax `{{...}}` within the LaTeX string.\n\nAfter isolating, use the `set_color_by_tex` method.\n\nUsing `substrings_to_isolate`:\n```python\nfrom manim import *\n\nclass ColorPartOfFormula(Scene):\n    def construct(self):\n        equation = MathTex(\n            r\"e^x = x^0 + x^1 + \\frac{1}{2} x^2\",\n            # Isolate all instances of 'x'\n            substrings_to_isolate=\"x\", \n            font_size=72\n        )\n        # Color all isolated 'x' substrings yellow\n        equation.set_color_by_tex(\"x\", YELLOW)\n        self.add(equation)\n```\nUsing double braces:\n```python\nfrom manim import *\n\nclass ColorPartOfFormulaBraces(Scene):\n    def construct(self):\n        equation = MathTex(\n            r\"{{e^x}} = {{x}}^0 + {{x}}^1 + \\frac{1}{2} {{x}}^2\",\n            font_size=72\n        )\n        # Color only the 'x' parts yellow\n        equation.set_color_by_tex(\"x\", YELLOW)\n        self.add(equation)\n```\nSimply using `set_color_by_tex(\"x\", YELLOW)` without isolating might color larger parts of the formula containing 'x'."
  },
  {
    "instruction": "How can I see the indices of the different parts of a complex `MathTex` object to manipulate them?",
    "answer": "You can use the `index_labels` helper function. Apply it to the `MathTex` object (or its parts, often `mobject[0]` for single-line expressions) to display the numerical indices of each submobject directly on the screen. This helps identify which index or slice corresponds to the part you want to modify.\n\n```python\nfrom manim import *\n\nclass ShowIndicesExample(Scene):\n    def construct(self):\n        formula = MathTex(r\"\\frac{a+b}{c^2}\", font_size=96)\n        \n        # Display the indices of the components within the first part of MathTex\n        indices_visual = index_labels(formula[0])\n        self.add(formula, indices_visual)\n        \n        # Example: Use indices found via index_labels to color 'a+b'\n        # Assuming 'a', '+', 'b' correspond to indices 1, 2, 3 (check output of index_labels)\n        # formula[0][1:4].set_color(YELLOW) # Uncomment after checking indices\n```"
  },
  {
    "instruction": "Generate Manim code to display a multi-line equation aligned at the equals sign.",
    "answer": "Use `MathTex` and standard LaTeX alignment syntax with `&` to mark alignment points and `\\\\` for line breaks. `MathTex` uses the `align*` environment by default.\n\n```python\nfrom manim import *\n\nclass AlignedEquation(Scene):\n    def construct(self):\n        aligned_eq = MathTex(\n            r\"E &= mc^2 \\\\\n             mc^2 &= E\", \n            font_size=72\n        )\n        self.add(aligned_eq)\n```\nThis will render the two lines with the equals signs vertically aligned."
  },
  {
    "instruction": "Explain how to use a different math font, like French Cursive, for LaTeX in Manim.",
    "answer": "To change the math font for LaTeX rendering, you need to specify a different TeX template. Manim provides several pre-defined math font templates in `TexFontTemplates`. Assign one of these templates to the `tex_template` parameter of your `Tex` or `MathTex` object.\n\n```python\nfrom manim import *\n\nclass FrenchCursiveMathFont(Scene):\n    def construct(self):\n        equation = MathTex(\n            r\"f(x) = \\int_0^x g(t) dt\",\n            tex_template=TexFontTemplates.french_cursive,\n            font_size=96\n        )\n        self.add(equation)\n```"
  }
]